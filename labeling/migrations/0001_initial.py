# Generated by Django 5.2 on 2025-06-27 12:49
# Django 5.2에 의해 2025-06-27 12:49에 자동 생성됨

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    """초기 데이터베이스 스키마 생성 - 기본 모델들 (User, Batch, Label, Image, LabelingResult)"""

    initial = True  # 초기 마이그레이션임을 나타냄

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),  # Django 인증 시스템에 의존
    ]

    operations = [
        # 배치(Batch) 모델 생성 - 이미지들을 그룹화하는 단위
        migrations.CreateModel(
            name="Batch",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),  # 배치 이름 (최대 100자)
            ],
        ),
        
        # 라벨(Label) 모델 생성 - 이미지에 붙일 수 있는 태그들
        migrations.CreateModel(
            name="Label",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=50)),  # 라벨 이름 (최대 50자)
            ],
        ),
        
        # 사용자(User) 모델 생성 - Django 기본 User 모델을 확장
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),  # 비밀번호
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),  # 마지막 로그인 시간
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),  # 슈퍼유저 여부
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),  # 사용자명 (고유값, 최대 150자)
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),  # 이름
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),  # 성
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),  # 이메일 주소
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),  # 관리자 사이트 접근 권한
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),  # 계정 활성화 상태
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),  # 가입 날짜
                ("is_approved", models.BooleanField(default=False)),  # 관리자 승인 여부 (커스텀 필드)
                
                # Django 권한 시스템 관련 필드들
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),  # 사용자가 속한 그룹들
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),  # 사용자별 특정 권한들
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),  # 사용자 모델 매니저
            ],
        ),
        
        # 이미지(Image) 모델 생성 - 라벨링할 이미지 정보
        migrations.CreateModel(
            name="Image",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("file_name", models.CharField(max_length=255)),  # 파일명
                ("url", models.URLField()),  # 이미지 URL
                (
                    "drive_file_id",
                    models.CharField(blank=True, max_length=255, null=True),
                ),  # Google Drive 파일 ID (선택사항)
                (
                    "batch",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="images",
                        to="labeling.batch",
                    ),
                ),  # 배치와의 외래키 관계 (배치가 삭제되면 이미지도 삭제)
            ],
        ),
        
        # 라벨링 결과(LabelingResult) 모델 생성 - 사용자가 이미지에 붙인 라벨 정보
        migrations.CreateModel(
            name="LabelingResult",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),  # 생성 시간 (자동 설정)
                ("updated_at", models.DateTimeField(auto_now=True)),  # 수정 시간 (자동 업데이트)
                (
                    "image",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="labeling.image"
                    ),
                ),  # 이미지와의 외래키 관계 (이미지가 삭제되면 결과도 삭제)
                ("labels", models.ManyToManyField(to="labeling.label")),  # 라벨들과의 다대다 관계
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),  # 사용자와의 외래키 관계 (사용자가 삭제되면 결과도 삭제)
            ],
        ),
    ]
