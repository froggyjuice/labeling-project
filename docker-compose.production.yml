version: '3.8'

services:
  # PostgreSQL 데이터베이스
  db:
    image: postgres:15
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backend
    restart: unless-stopped

  # Redis 캐시 및 세션 스토리지
  redis:
    image: redis:7-alpine
    volumes:
      - redis_data:/data
    networks:
      - backend
    restart: unless-stopped
    command: redis-server --appendonly yes

  # Django 애플리케이션
  web:
    build:
      context: .
      dockerfile: Dockerfile.production
    env_file:
      - .env.production
    environment:
      - DJANGO_SETTINGS_MODULE=labeling_project.settings_production
      - DB_HOST=db
      - REDIS_URL=redis://redis:6379/1
    volumes:
      - static_volume:/app/static
      - media_volume:/app/media
    networks:
      - backend
      - frontend
    depends_on:
      - db
      - redis
    restart: unless-stopped
    command: >
      sh -c "python manage.py migrate --settings=labeling_project.settings_production &&
             python manage.py collectstatic --noinput --settings=labeling_project.settings_production &&
             gunicorn --bind 0.0.0.0:8000 --workers 3 --timeout 60 labeling_project.wsgi:application"

  # Nginx 리버스 프록시 + SSL 터미네이션
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - static_volume:/var/www/static:ro
      - media_volume:/var/www/media:ro
      - /etc/letsencrypt:/etc/letsencrypt:ro
    networks:
      - frontend
    depends_on:
      - web
    restart: unless-stopped

  # Certbot (Let's Encrypt SSL 인증서)
  certbot:
    image: certbot/certbot
    volumes:
      - /etc/letsencrypt:/etc/letsencrypt
      - /var/www/certbot:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

volumes:
  postgres_data:
  redis_data:
  static_volume:
  media_volume:

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge 